import type { FormSchemaGetter } from '#/adapter/form';
import type { VxeGridProps } from '#/adapter/vxe-table';

import { DictEnum } from '@vben/constants';
import { getPopupContainer } from '@vben/utils';

import { getDictOptions } from '#/utils/dict';
import { renderDict, renderDictTags } from '#/utils/render';



export const querySchema: FormSchemaGetter = () => [
#foreach($column in $columns)
  #if($column.query)
    #set($dictType=$column.dictType.toUpperCase())
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #set($parentheseIndex=$column.columnComment.indexOf("（"))
    #if($parentheseIndex != -1)
      #set($comment=$column.columnComment.substring(0, $parentheseIndex))
    #else
      #set($comment=$column.columnComment)
    #end
    #if($column.htmlType == "input" || $column.htmlType == "textarea")
    {
      component: 'Input',
      fieldName: '${column.javaField}',
      label: '${comment}',
    },
    #elseif(($column.htmlType == "select" || $column.htmlType == "radio") && "" != $dictType)
      {
        component: 'Select',
        componentProps: {
          getPopupContainer,
      #if($column.javaType == "Integer" || $column.javaType == "Long")
          options: getDictOptions(DictEnum.${dictType}, true),
      #elseif($column.javaType == "Boolean")
          options: getDictOptions(DictEnum.${dictType}, false, true),
      #else
          options: getDictOptions(DictEnum.${dictType}),
      #end
        },
        fieldName: '${column.javaField}',
        label: '${comment}',
      },


    #elseif($column.htmlType == "datetime" && $column.queryType != "BETWEEN")
    {
      component: 'DatePicker',
      fieldName: '${column.javaField}',
      label: '${comment}',
    },
    #elseif($column.htmlType == "datetime" && $column.queryType == "BETWEEN")
    {
      component: 'RangePicker',
      fieldName: '${column.javaField}',
      label: '${comment}',
    },
    #end
  #end
#end

];

export const columns: VxeGridProps['columns'] = [
  { type: 'checkbox', width: 60 },
#foreach($column in $columns)
  #set($javaField=$column.javaField)
  #set($parentheseIndex=$column.columnComment.indexOf("（"))
  #if($parentheseIndex != -1)
    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
  #else
    #set($comment=$column.columnComment)
  #end
  #if($column.list && $column.htmlType == "imageUpload")
    //todo 图片类型
  #elseif($column.list && $column.dictType && "" != $column.dictType)
    {
      title: '${comment}',
      field: '${javaField}',
      width: 120,
      slots: {
        default: ({ row }) => {
          #if($column.htmlType == "checkbox")
            if (typeof row.${javaField} === 'string') {
              const values = row.${javaField}
                      .split(',')
                      .map((item: any) => item.trim());
              return renderDictTags(
                      values,
                      getDictOptions(DictEnum.${column.dictType.toUpperCase()}),
                      false,
              );
            }
            return row.${javaField} || '';
          #else
            #if($column.javaType == "Integer" || $column.javaType == "Long")
              return renderDict(row.${javaField}, DictEnum.${column.dictType.toUpperCase()}, true);
            #elseif($column.javaType == "Boolean")
              return renderDict(row.${javaField}, DictEnum.${column.dictType.toUpperCase()},
                      false, true);
            #else
              return renderDict(row.${javaField}, DictEnum.${column.dictType.toUpperCase()});
            #end

          #end


        },
      },
    },

  #elseif($column.list && "" != $javaField)
    {
      title: '${comment}',
      field: '${javaField}',
    },
  #end
#end
  {
    title: '操作',
    field: 'action',
    fixed: 'right',
    width: 150,
    slots: { default: 'action' },
  },
];

#if($popupComponent == "drawer")
export const drawerSchema: FormSchemaGetter = () => [
#else
export const modalSchema: FormSchemaGetter = () => [
#end
#foreach($column in $columns)
  #if($column.insert || $column.edit)
    #set($dictType=$column.dictType.toUpperCase())
    #set($javaField=$column.javaField)
    #set($parentheseIndex=$column.columnComment.indexOf("（"))
    #if($parentheseIndex != -1)
      #set($comment=$column.columnComment.substring(0, $parentheseIndex))
    #else
      #set($comment=$column.columnComment)
    #end
    #if($column.pk)
  {
    component: 'Input',
    dependencies: {
      show: () => false,
      triggerFields: [''],
    },
    fieldName: '${javaField}',
    label: '${comment}',

  },
    #elseif($column.htmlType == "input")
  {
    component: 'Input',
    fieldName: '${javaField}',
    label: '${comment}',
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end

  },
    #elseif($column.htmlType == "textarea")
  {
    component: 'Textarea',
    formItemClass: 'items-start',
    fieldName: '${javaField}',
    label: '${comment}',
    componentProps: {
      autoSize: true,
    },
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end
  },
    #elseif($column.htmlType == "select" && "" != $dictType)
  {
    component: 'Select',
    componentProps: {
      getPopupContainer,
      options: getDictOptions(DictEnum.${dictType}),
    },
    fieldName: '${javaField}',
    label: '${comment}',
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end
  },
    #elseif($column.htmlType == "radio" && "" != $dictType)
  {
    component: 'RadioGroup',
    componentProps: {
      buttonStyle: 'solid',
      options: getDictOptions(DictEnum.${dictType}),
      optionType: 'button',
    },
    #if($column.required)
    defaultValue: '',
    #end
    fieldName: '${javaField}',
    label: '${comment}',
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end
  },
    #elseif($column.htmlType == "datetime")
  {
    component: 'DatePicker',
    fieldName: '${javaField}',
    label: '${comment}',
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end
  },
    #elseif($column.htmlType == "checkbox" && "" != $dictType)
  {
    component: 'CheckboxGroup',
    componentProps: {
      options: getDictOptions(DictEnum.${dictType}),
    },
    fieldName: '${javaField}',
    label: '${comment}',
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end
  },
    #elseif($column.htmlType == "imageUpload")
  {
    component: 'Upload',
    fieldName: '${javaField}',
    label: '${comment}',
    #if($column.required)
    rules: 'required',
    #end
    #if($column.insert == 0)
      dependencies: {
        show: (values) => !!values.id,
        triggerFields: ['id'],
      },
    #end
  },
    #end
  #end
#end
];
