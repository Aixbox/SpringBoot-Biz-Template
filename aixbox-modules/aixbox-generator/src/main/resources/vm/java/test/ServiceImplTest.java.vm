package ${packageName}.service.impl;

import com.aixbox.common.core.pojo.PageResult;
import com.aixbox.common.test.core.ut.BaseDbUnitTest;
import ${packageName}.domain.entity.${ClassName};
import ${packageName}.domain.vo.request.${ClassName}PageReq;
import ${packageName}.domain.vo.request.${ClassName}SaveReq;
import ${packageName}.domain.vo.request.${ClassName}UpdateReq;
import ${packageName}.mapper.${ClassName}Mapper;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.context.annotation.Import;

import javax.annotation.Resource;
import java.util.Arrays;
import java.util.List;

import static com.aixbox.common.test.core.util.RandomUtils.randomPojo;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * ${ClassName}服务测试类
 */
@DisplayName("${ClassName}服务测试")
@Import({${ClassName}ServiceImpl.class})
class ${ClassName}ServiceImplTest extends BaseDbUnitTest {

    @Resource
    private ${ClassName}ServiceImpl ${className}Service;

    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    @Nested
    @DisplayName("新增${ClassName}测试")
    class Add${ClassName}Tests {

        @Test
        @DisplayName("新增${ClassName} - 正常情况 - 应成功")
        void add${ClassName}_WhenNormal_ShouldSuccess() {
            // 准备测试数据
            ${ClassName}SaveReq addReq = randomPojo(${ClassName}SaveReq.class);

            // 执行测试
            Long resultId = ${className}Service.add${ClassName}(addReq);

            // 验证结果
            assertNotNull(resultId);
        }
    }

    @Nested
    @DisplayName("更新${ClassName}测试")
    class Update${ClassName}Tests {

        @Test
        @DisplayName("更新${ClassName} - 存在数据 - 应成功")
        void update${ClassName}_WhenExists_ShouldSuccess() {
            //准备参数
            ${ClassName} ${className} = randomPojo(${ClassName}.class);
            ${className}Mapper.insert(${className});

            // 准备测试数据
            ${ClassName}UpdateReq ${className}UpdateReq = randomPojo(${ClassName}UpdateReq.class);
            ${className}UpdateReq.setId(${className}.getId());

            // 执行测试
            Boolean result = ${className}Service.update${ClassName}(${className}UpdateReq);

            // 验证结果
            assertTrue(result);
        }
    }

    @Nested
    @DisplayName("删除${ClassName}测试")
    class Delete${ClassName}Tests {

        @Test
        @DisplayName("删除${ClassName} - 存在数据 - 应成功")
        void delete${ClassName}_WhenExists_ShouldSuccess() {
            // 准备测试数据
            ${ClassName} ${className}1 = randomPojo(${ClassName}.class);
            ${ClassName} ${className}2 = randomPojo(${ClassName}.class);
            ${className}Mapper.insertBatch(Arrays.asList(${className}1, ${className}2));
            List<Long> ids = Arrays.asList(${className}1.getId(), ${className}2.getId());

            // 执行测试
            Boolean result = ${className}Service.delete${ClassName}(ids);

            // 验证结果
            assertTrue(result);
        }
    }

    @Nested
    @DisplayName("获取${ClassName}测试")
    class Get${ClassName}Tests {

        @Test
        @DisplayName("获取${ClassName} - 存在数据 - 应成功返回")
        void get${ClassName}_WhenExists_ShouldReturnData() {
            // 准备测试数据
            ${ClassName} ${className} = randomPojo(${ClassName}.class);
            ${className}Mapper.insert(${className});

            // 执行测试
            ${ClassName} result = ${className}Service.get${ClassName}(${className}.getId());

            // 验证结果
            assertNotNull(result);
            assertEquals(${className}.getId(), result.getId());
        }
    }

    @Nested
    @DisplayName("分页查询${ClassName}测试")
    class Get${ClassName}PageTests {

        @Test
        @DisplayName("分页查询${ClassName} - 有数据 - 应成功返回")
        void get${ClassName}Page_WhenHasData_ShouldReturnPage() {
            // 准备测试数据
            ${ClassName} ${className}1 = randomPojo(${ClassName}.class);
            ${className}Mapper.insert(${className}1);


            ${ClassName}PageReq ${className}PageReq = new ${ClassName}PageReq();
            ${className}PageReq.setPageNo(1);
            ${className}PageReq.setPageSize(10);
            // 执行测试
            PageResult<${ClassName}> result = ${className}Service.get${ClassName}Page(${className}PageReq);

            // 验证结果
            assertNotNull(result);
            assertEquals(1, result.getTotal());
            assertEquals(${className}1.getId(), result.getList().get(0).getId());
        }
    }
}